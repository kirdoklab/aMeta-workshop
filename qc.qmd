---
title: "Quality control and trimming"
---

## Introduction

The pipeline starts with a quality controlling step. This step contains four main rules:

+ Quality controlling of raw `fastq` files using `fastqc` tool
+ Removing leftover adapters an low quality bases using `cutadapt`
+ Quality controlling of the trimmed `fastq` files using `fastqc` tool
+ Combining several `fastqc` outputs into one file using `MultiQC` tool

## Quality control before trimming

Input files are retrieved from the sample sheet that you provided. And you will have two output files `html` and `zip` files. The `html` file contains the final report. Here is the simplified snakemake rule:

```
rule FastQC_BeforeTrimming:
    """Run fastq before trimming"""
    output:
        html="results/FASTQC_BEFORE_TRIMMING/{sample}_fastqc.html",
        zip="results/FASTQC_BEFORE_TRIMMING/{sample}_fastqc.zip",
    input:
        fastq=lambda wildcards: samples.loc[wildcards.sample].fastq,
    message:
        "FastQC_BeforeTrimming: RUNNING QUALITY CONTROL WITH FASTQC FOR SAMPLE {input.fastq} BEFORE TRIMMING ADAPTERS"
    threads: 2
    shell:
        "fastqc {input.fastq} --threads {threads} --nogroup --outdir results/FASTQC_BEFORE_TRIMMING &> {log}"

```

Here is a simplified version of this code:

```bash
fastqc FASTQ \
    --threads 2 \
    --nogroup \
    --outdir results/FASTQC_BEFORE_TRIMMING/

```

To run this part using the `fastqc` tool, please copy and paste this command on your terminal. Remember to change your account name, with the username provided for you:

```bash
sbatch Cutadapt_Adapter_Trimming.sh --account=egitim
```

## Quality trimming step

After we run quality controls. We will run `cutadapt` tool to remove the leftover adapters and low quality bases. Here is the overview of this rule. 

You can add or remove adapters using the `config/config.yaml` file. 

In this file the inputs will be retrieved again from the samplesheet file. And the outputs will be placed to the `results/CUTADAPT_ADAPTER_TRIMMING/` folder. 

```
rule Cutadapt_Adapter_Trimming:
    output:
        fastq="results/CUTADAPT_ADAPTER_TRIMMING/{sample}.trimmed.fastq.gz",
    input:
        fastq=lambda wildcards: samples.loc[wildcards.sample].fastq,
    params:
        adapters=" ".join([f"-a {x}" for x in ADAPTERS]),
    message:
        "Cutadapt_Adapter_Trimming: TRIMMING ADAPTERS FOR SAMPLE {input.fastq} WITH CUTADAPT"
    threads: 1
    shell:
        "cutadapt {params.adapters} --minimum-length 30 -o {output.fastq} {input.fastq} &> {log}"

```

Here is how we will run it for one file:

```bash
cutadapt -a ADAPTERS --minimum-length 30 -o results/CUTADAPT_ADAPTER_TRIMMING/sample  

```

## Quality control after trimming

Then we will run the quality control after the trimming step:

```
rule FastQC_AfterTrimming:
    output:
        html="results/FASTQC_AFTER_TRIMMING/{sample}.trimmed_fastqc.html",
        zip="results/FASTQC_AFTER_TRIMMING/{sample}.trimmed_fastqc.zip",
    input:
        fastq="results/CUTADAPT_ADAPTER_TRIMMING/{sample}.trimmed.fastq.gz",
    threads: 2
    message:
        "FastQC_AfterTrimming: RUNNING QUALITY CONTROL WITH FASTQC FOR SAMPLE {input.fastq} AFTER TRIMMING ADAPTERS"
    shell:
        "fastqc {input.fastq} --threads {threads} --nogroup --outdir results/FASTQC_AFTER_TRIMMING &> {log}"
```

Here is how we will run it for one file:

```bash
fastqc results/CUTADAPT_ADAPTER_TRIMMING/{sample}.trimmed.fastq.gz --threads 2 --nogroup --outdir results/FASTQC_AFTER_TRIMMING
```

## Combine quality control outputs

At last we will combine all the fastqc reports into one file using Multifastqc tool:

```Â 
rule MultiQC:
    """Run MultiQC"""
    output:
        html="results/MULTIQC/multiqc_report.html",
    input:
        unpack(multiqc_input),
    params:
        config=os.path.join(WORKFLOW_DIR, "envs", "multiqc_config.yaml"),
    envmodules:
        *config["envmodules"]["multiqc"],
    benchmark:
        "benchmarks/MULTIQC/MULTIQC.benchmark.txt"
    message:
        "MultiQC: COMBINING QUALITY CONTROL METRICS WITH MULTIQC"
    shell:
        'echo {input} | tr " " "\n" > {output.html}.fof;'
        "multiqc -c {params.config} -l {output.html}.fof --verbose --force --outdir results/MULTIQC &> {log}"

```

